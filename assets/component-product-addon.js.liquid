class ShowProductAddon extends HTMLElement {
  constructor() {
    super();
    loadCSS("{{'component-product-addon.css' | asset_url }}");
    this.addonButton = this.querySelector('button.addon');
    this.closeButton = this.querySelector('button.close');
    this.addonContainer = this.querySelector('.product-addon');
    this.form = this.querySelector('form');
    this.submitButton = this.querySelectorAll('.cart-button[type="submit"]');
    this.cartDrawer = document.querySelector('cart-drawer');
  }

  connectedCallback() {
    this.addonButton.addEventListener('click', () => {
      this.addonContainer.classList.remove('hidden');
      document.body.style.overflowY = 'hidden';
      document.querySelector('main').style.zIndex = '4';
    });

    this.closeButton.addEventListener('click', () => {
      this.addonContainer.classList.add('hidden');
      document.body.style.overflowY = '';
      document.querySelector('main').style.zIndex = '1';
    });

    this.form.addEventListener('submit', async e => {
      e.preventDefault();
      const mainVariantId = this.getMainVariantId();
      const addonVariantId = this.getAddonVariantId();
      const formData = this.getFormData([addonVariantId, mainVariantId]);
      this.showLoader(true);
      await this.addToCart(formData);
      this.showLoader(false);
    });
  }

  getMainVariantId() {
    return this.querySelector('main-options-selector').itemId;
  }

  getAddonVariantId() {
    const mainVariantsElem = this.querySelector('main-variants');
    const nextOptionsSelector = mainVariantsElem.nextElementSibling.firstElementChild;
    return nextOptionsSelector?.itemId;
  }

  getFormData(itemIds) {
    const formData = {
      items: [],
    };

    itemIds.forEach(itemId => itemId && formData.items.push({ id: itemId, quantity: 1 }));
    return formData;
  }

  showLoader(boolean) {
    this.submitButton.forEach(button => {
      button.disabled = boolean;
      const svg = button.firstElementChild;
      const buttonText = svg.nextElementSibling;
      svg.classList.toggle('hidden', !boolean);
      buttonText.classList.toggle('hidden', boolean);
    });
  }

  async addToCart(formData) {
    const queryString = this.getQueryString();
    try {
      const response = await fetch(window.Shopify.routes.root + 'cart/add.js' + queryString, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });
      if (!response.ok) throw new Error("Une erreur inattendu s'est produite.");
      const json = await response.json();
      this.renderNewSections(json);
      this.closeButton.click();
    } catch (error) {
      console.error('Error:', error);
      this.showErrorMessage();
    }
  }

  getQueryString() {
    const sectionsToRender = this.cartDrawer.getSectionsToRender();
    let queryString = '?sections=';
    sectionsToRender.forEach((section, index) => {
      queryString += section.id;
      if (index < sectionsToRender.length - 1) queryString += ',';
    });
    return queryString;
  }

  renderNewSections(json) {
    this.cartDrawer.renderContents(json);
  }

  showErrorMessage() {
    //fire an error event
    const errorEvent = new CustomEvent('new-error', {
      detail: {
        message: 'Nous sommes désolés mais une erreur sur nos serveur empêche de prendre votre commande. Veuillez réessayer.',
      },
    });
    document.body.dispatchEvent(errorEvent);
  }
}
customElements.define('show-product-addon', ShowProductAddon);

class PaintingSettings extends HTMLElement {
  painting = {
    widthIndicator: null,
    heightIndicator: null,
    container: null,
    wrapper: null,
    wrapperInside: null,
    frameShadow: null,
    image: {
      width: 0,
      height: 0,
      elem: null,
    },
  };

  constructor() {
    super();
    this.painting.container = this.querySelector('.painting-container');
    this.painting.widthIndicator = this.painting.container.querySelector('.width > span');
    this.painting.heightIndicator = this.painting.container.querySelector('.height > span');
    this.painting.wrapper = this.painting.container.querySelector('.painting-wrapper');
    this.painting.wrapperInside = this.painting.wrapper.querySelector('.inside');
    this.painting.image.elem = this.painting.wrapper.querySelector('img');
    this.painting.frameShadow = this.painting.container.querySelector('.frame-shadow');
  }

  changeIndicators({ width, height }) {
    this.painting.image.width = width;
    this.painting.image.height = height;
    this.painting.widthIndicator.innerHTML = width + 'cm';
    this.painting.heightIndicator.innerHTML = height + 'cm';
  }

  waitUntilImgLoaded() {
    return new Promise(resolve => {
      if (this.painting.image.elem.complete) {
        resolve();
      } else {
        this.painting.image.elem.addEventListener('load', () => {
          resolve();
        });
      }
    });
  }
}
customElements.define('painting-settings', PaintingSettings);

class SummaryAddon extends HTMLElement {
  nodesAdded = [];

  constructor() {
    super();
    this.template = this.querySelector('template.line');
  }

  changeDatas(input, price) {
    this.changeLineOption(input);
    this.changeLinePrice(input, price);
    this.calculateTotalPrice();
  }

  changeLineOption(input) {
    this.querySelector(`.${input.name} > span span:last-child`).innerHTML = input.value;
  }

  changeLinePrice(input, price) {
    this.querySelector(`.${input.name} > span:last-child`).innerHTML = parseInt(price) ? `€${this.formatPrice(price)}` : '€0,00';
  }

  calculateTotalPrice() {
    let price = 0;
    this.querySelectorAll('p.line-item > span:last-child').forEach(span => {
      const priceString = span.innerHTML.replace('€', '').replace(',', '');
      price += parseInt(priceString);
    });
    this.querySelector('.final-price').innerHTML = '€' + (price / 100).toFixed(2);
  }

  formatPrice(price) {
    const index = price.length > 3 ? 2 : 1;
    return price.substr(0, index) + ',' + price.substr(index);
  }

  addOptionLine({ optionNameHandleize, optionName, optionValue, price }) {
    const clone = this.template.content.cloneNode(true);
    clone.querySelector('p').classList.add(optionNameHandleize);
    clone.querySelector('p > span > span:first-child').innerHTML = optionName + ': ';
    clone.querySelector('p > span > span:last-child').innerHTML = optionValue;
    clone.querySelector('p > span:last-child').innerHTML = price;
    const hr = this.querySelector('hr');
    this.querySelector('.summary').insertBefore(clone, hr);
    this.nodesAdded.push(hr.previousElementSibling);
  }
}
customElements.define('summary-addon', SummaryAddon);

class MainVariants extends HTMLElement {
  matter = {
    radioName: 'matiere',
    canvas: 'toile',
    plexiglass: 'plexiglas',
    aluminium: 'aluminium',
  };

  constructor() {
    super();
    this.form = this.closest('form');
    this.paintingSettings = this.form.querySelector('painting-settings');
    this.summaries = this.form.querySelectorAll('summary-addon');
    this.sizeSelector = this.querySelector('.addon select');
    this.radios = this.querySelectorAll('input[type="radio"]');
  }

  connectedCallback() {
    this.sizeSelector.addEventListener('change', e => {
      const { width, height } = this.getSelectedSize(e);
      this.paintingSettings.changeIndicators({ width, height });
      const optionSelected = Array.from(e.target.children).filter(option => option.innerHTML.includes(e.target.value))[0];
      const price = optionSelected.dataset.price;
      this.changeSummariesData(e.target, price);
    });

    this.radios.forEach(radio => {
      radio.addEventListener('change', () => {
        this.changeSummariesData(radio, radio.dataset.price);
      });
    });
  }

  async firstActions() {
    await this.paintingSettings.waitUntilImgLoaded();
    const { width, height } = this.getSelectedSize();
    this.paintingSettings.painting.image.width = width;
    this.paintingSettings.painting.image.height = height;
  }

  getSelectedSize(event) {
    const [width, heightBrut] = event ? event.target.value.split('x') : this.sizeSelector.value.split('x');
    const height = heightBrut.split(' ')[0];
    return {
      width: parseInt(width.split(' ')[0]),
      height: parseInt(height.split(' ')[0]),
    };
  }

  changeSummariesData(input, price) {
    this.summaries.forEach(summary => summary.changeDatas(input, price));
  }
}
customElements.define('main-variants', MainVariants);

class OtherAddon extends HTMLElement {
  constructor() {
    super();
    this.summaries = document.querySelectorAll('summary-addon');
    this.radioContainers = this.querySelectorAll('.radio-container');
    this.radios = this.querySelectorAll('input[type="radio"]');
    this.mainVariants = this.closest('form').querySelector('main-variants');
    //Bonded listeners
    this.radioBoundListener = this.handleRadioChange.bind(this);
  }

  connectedCallback() {
    this.summaries.forEach(summary => {
      this.radioContainers.forEach(radioContainer => {
        summary.addOptionLine({
          optionNameHandleize: radioContainer.dataset.optionNameHandleize,
          optionName: radioContainer.dataset.optionName,
          optionValue: radioContainer.dataset.optionFirstValue,
          price: radioContainer.dataset.optionFirstPrice,
        });
      });

      summary.calculateTotalPrice();
    });

    this.radios.forEach(radio => radio.addEventListener('change', this.radioBoundListener));
  }

  disconnectedCallback() {
    this.summaries.forEach(summary => {
      summary.nodesAdded.forEach(node => {
        node.remove();
      });
    });

    //remove eventListeners
    this.radios.forEach(radio => radio.removeEventListener('change', this.radioBoundListener));
  }

  handleRadioChange(e) {
    const radio = e.target;
    this.mainVariants.changeSummariesData(radio, radio.dataset.price);
  }

  changeSummariesData(input, price) {
    this.summaries.forEach(summary => summary.changeDatas(input, price));
  }
}
customElements.define('other-addon', OtherAddon);

class CanvasAddon extends OtherAddon {
  thickness = {
    radioName: 'epaisseur-du-chassis',
    selected: 'small',
    nameByValue: {
      '2 cm': 'small',
      '4 cm': 'big',
    },
    valueByName: {
      small: '2 cm',
      big: '4 cm',
    },
  };
  frame = {
    radioName: 'cadre',
    'sans cadre': {
      isFrame: false,
      frameIsPhoto: false,
      horizontal: 'none',
      vertical: 'none',
      boxShadow: 'none',
    },
    blanc: {
      isFrame: true,
      frameIsPhoto: false,
      horizontal: '#E8E7E4',
      vertical: '#f9f8f4',
      boxShadow: '0 0 2px 13px rgba(0, 0, 0, 0.05)',
    },
    ['noir mat']: {
      isFrame: true,
      frameIsPhoto: false,
      horizontal: '#434343',
      vertical: '#434343',
      boxShadow: '0 0 2px 13px rgba(0, 0, 0, 0.3)',
    },
    ['argent ancien']: {
      isFrame: true,
      frameIsPhoto: true,
      horizontal: 'url(https://cdn.shopify.com/s/files/1/0623/2388/4287/files/cadre-argent-horizontal.jpg?v=1669287982)',
      vertical: 'url(https://cdn.shopify.com/s/files/1/0623/2388/4287/files/cadre-argent-vertical.jpg?v=1669288115)',
      boxShadow: '0 0 1px 13px rgb(67, 67, 67)',
    },
    ['chêne clair']: {
      isFrame: true,
      frameIsPhoto: true,
      horizontal: 'url(https://cdn.shopify.com/s/files/1/0623/2388/4287/files/cadre-chene-claire-horizontal.jpg?v=1669287626)',
      vertical: 'url(https://cdn.shopify.com/s/files/1/0623/2388/4287/files/cadre-chene-claire-vertical.jpg?v=1669288044)',
      boxShadow: '0 0 2px 13px rgba(0, 0, 0, 0.2)',
    },
    noyer: {
      isFrame: true,
      frameIsPhoto: true,
      horizontal: 'url(https://cdn.shopify.com/s/files/1/0623/2388/4287/files/cadre-noyer-horizontal.jpg?v=1669287904)',
      vertical: 'url(https://cdn.shopify.com/s/files/1/0623/2388/4287/files/cadre-noyer-vertical.jpg?v=1669288160)',
      boxShadow: '0 0 2px 13px rgba(0, 0, 0, 0.5)',
    },
    selected: 'sans cadre',
  };
  borderSizeInCm = {
    big: 4,
    small: 2,
  };
  borderColor = {
    radioName: 'couleur-de-bordure',
    white: 'blanc',
    black: 'noir',
    mirror: 'miroir',
    streched: 'étiré',
    folded: 'plié',
    selected: 'blanc',
  };

  constructor() {
    super();
    this.form = this.closest('form');
    this.mainVariants = this.form.querySelector('main-variants');
    this.paintingSettings = this.form.querySelector('painting-settings');
    this.cssVariableParent = this.closest('show-product-addon');
    this.radios = Array.from(this.querySelectorAll('input[type="radio"]'));
    //Bonded listeners
    this.sizeSelectorBoundListener = this.handleSizeChange.bind(this);
    this.radioBoundListener = this.handleRadioChange.bind(this);
  }

  async connectedCallback() {
    super.connectedCallback();
    this.mainVariants.sizeSelector.addEventListener('change', this.sizeSelectorBoundListener);

    this.radios.forEach(radio => radio.addEventListener('change', this.radioBoundListener));

    await this.firstActions();
  }

  handleSizeChange() {
    this.changeImgBorderSize();
  }

  handleRadioChange(e) {
    super.handleRadioChange(e);
    const radio = e.target;
    switch (radio.name) {
      case this.thickness.radioName:
        this.thickness.selected = parseInt(radio.value.split(' ')[0]) === 2 ? 'small' : 'big';
        this.changeImgBorderSize();
        break;
      case this.borderColor.radioName:
        this.changeImgBorderColor(radio.value.toLocaleLowerCase());
        break;
      case this.frame.radioName:
        const color = radio.value.toLocaleLowerCase();
        this.frame.selected = color;
        this.changeImgFrame(color);
        break;
    }
  }

  disconnectedCallback() {
    super.disconnectedCallback();
    this.changeImgBorderSize('0');
    this.changeImgFrame('sans cadre');
    this.changeImgBorderColor(this.borderColor.white);

    //remove listeners
    this.mainVariants.sizeSelector.removeEventListener('change', this.sizeSelectorBoundListener);
    this.radios.forEach(radio => radio.removeEventListener('change', this.radioBoundListener));
  }

  changeImgBorderSize(size) {
    if (!size) {
      const borderSizeRatio = this.borderSizeInCm[this.thickness.selected] / this.paintingSettings.painting.image.width;
      const borderSizeExpected = this.paintingSettings.painting.image.elem.clientWidth * borderSizeRatio;
      this.cssVariableParent.style.setProperty('--border-size', borderSizeExpected + 'px');
    } else {
      this.cssVariableParent.style.setProperty('--border-size', size + 'px');
    }
    this.setFoldedImageBorder();
  }

  setFoldedImageBorder() {
    const hideFoldBorder = this.frame[this.frame.selected].isFrame && this.borderColor.selected === this.borderColor.folded && this.thickness.selected === 'big';
    this.paintingSettings.painting.container.querySelector('.folded-wrapper')?.classList.toggle('hide-border', hideFoldBorder);

    if (hideFoldBorder) {
      this.paintingSettings.painting.container.classList.toggle('with-frame', false);
    }
  }

  changeImgFrame(color) {
    this.hideFrames(!this.frame[color].isFrame);
    this.setFoldedImageBorder();
    this.paintingSettings.painting.frameShadow.style.boxShadow = this.frame[color].boxShadow;

    this.paintingSettings.painting.container.querySelectorAll('.frame').forEach(frame => {
      if (!this.frame[color].frameIsPhoto) {
        const direction = frame.classList.contains('one') || frame.classList.contains('three') ? 'horizontal' : 'vertical';
        frame.style.background = this.frame[color][direction];
        return;
      }

      if (frame.classList.contains('one') || frame.classList.contains('three')) {
        frame.style.background = '';
        frame.style.backgroundImage = this.frame[color].horizontal;
      } else {
        frame.style.background = '';
        frame.style.backgroundImage = this.frame[color].vertical;
      }
    });
  }

  hideFrames(boolean) {
    this.paintingSettings.painting.container.classList.toggle('with-frame', !boolean);
    this.paintingSettings.painting.container.querySelectorAll('.corner').forEach(corner => corner.classList.toggle('hidden', !boolean));
    this.paintingSettings.painting.container.querySelectorAll('.frame').forEach(corner => corner.classList.toggle('hidden', boolean));
    this.paintingSettings.painting.container.classList.toggle('without-border', !boolean);
    this.paintingSettings.painting.wrapper.classList.toggle('transparent', !boolean);
    this.paintingSettings.painting.wrapperInside.style.overflow = boolean ? 'visible' : 'hidden';
  }

  changeImgBorderColor(color) {
    if (color !== this.borderColor.black) {
      this.paintingSettings.painting.wrapper.classList.add('white');
      color === this.borderColor.white ? this.paintingSettings.painting.container.classList.remove('with-border') : this.paintingSettings.painting.container.classList.add('with-border');
      this.paintingSettings.painting.wrapper.classList.remove('black');
    } else {
      this.paintingSettings.painting.wrapper.classList.add('black');
      this.paintingSettings.painting.wrapper.classList.remove('white');
      this.paintingSettings.painting.container.classList.remove('with-border');
    }

    switch (this.borderColor.selected) {
      case this.borderColor.mirror:
        this.paintingSettings.painting.wrapperInside.querySelectorAll('.mirror').forEach(mirror => {
          mirror.remove();
        });
        break;
      case this.borderColor.streched:
        this.paintingSettings.painting.wrapperInside.querySelectorAll('.stretched').forEach(mirror => {
          mirror.remove();
        });
        break;
      case this.borderColor.folded:
        this.paintingSettings.painting.container.querySelector('.folded-wrapper').remove();
        break;
    }

    switch (color) {
      case this.borderColor.mirror:
        ['left', 'right', 'top', 'bottom'].forEach(side => {
          const imgClone = this.paintingSettings.painting.image.elem.cloneNode();
          imgClone.classList.add('mirror');
          imgClone.classList.add(side);
          this.paintingSettings.painting.wrapperInside.appendChild(imgClone);
        });
        break;
      case this.borderColor.streched:
        ['left', 'right', 'top', 'bottom'].forEach(side => {
          const imgClone = this.paintingSettings.painting.image.elem.cloneNode();
          imgClone.classList.add('stretched');
          imgClone.classList.add(side);
          this.paintingSettings.painting.wrapperInside.appendChild(imgClone);
        });
        break;
      case this.borderColor.folded:
        const imgWrapper = document.createElement('span');
        imgWrapper.classList.add('folded-wrapper');
        const imgClone = this.paintingSettings.painting.image.elem.cloneNode();
        imgClone.classList.add('folded');
        imgWrapper.appendChild(imgClone);
        this.paintingSettings.painting.container.appendChild(imgWrapper);
        break;
    }
    this.borderColor.selected = color;
    this.setFoldedImageBorder();
  }

  async firstActions() {
    await this.mainVariants.firstActions();
    this.changeImgBorderSize();
  }
}
customElements.define('canvas-addon', CanvasAddon);

class OptionsSelector extends HTMLElement {
  itemId = null;

  constructor() {
    super();
    this.variantsData = JSON.parse(this.querySelector('[type="application/json"]').textContent);
    this.radios = this.querySelectorAll('input[type="radio"]');
    this.sizeSelector = this.querySelector('.addon select');
    this.hasSelector = this.sizeSelector !== null;
    this.itemId = this.dataset.itemId;

    //Bonded listeners
    this.sizeSelectorBoundListener = this.handleSizeChange.bind(this);
    this.radioBoundListener = this.handleRadioChange.bind(this);
  }

  connectedCallback() {
    this.sizeSelector?.addEventListener('change', this.sizeSelectorBoundListener);
    this.radios.forEach(radio => radio.addEventListener('change', this.radioBoundListener));
    this.updateItem();
  }

  disconnectedCallback() {
    this.sizeSelector?.removeEventListener('change', this.sizeSelectorBoundListener);
    this.radios.forEach(radio => radio.removeEventListener('change', this.radioBoundListener));
  }

  handleSizeChange() {
    this.hideNonExistantInputs(this.sizeSelector);
    this.updateItem();
  }

  handleRadioChange(e) {
    const radio = e.target;
    this.hideNonExistantInputs(radio);
    this.updateItem();
  }

  hideNonExistantInputs(elem) {
    if (this.shoulHideNonExistantInputs(elem)) {
      const availableVariants = this.hideSecondNonExistantInputs();
      this.hideLastNonExistantInputs(availableVariants);
    }
  }

  shoulHideNonExistantInputs(elem) {
    if (!elem) return true;
    const nextRadioContainer = elem.closest('.box-style').nextElementSibling;
    return nextRadioContainer ? nextRadioContainer.classList.contains('radio-container') : false;
  }

  hideSecondNonExistantInputs() {
    const { firstOptionName, secondOptionName } = this.getOptionNames();
    const firstValueSelected = this.getInputValueSelected('first');
    const availableVariants = this.getVariantsWithValueSelected(this.variantsData, firstOptionName, firstValueSelected);
    const secondInputs = this.getInputs('second');
    this.hideNonExistantInputBelow({ availableVariants, inputs: secondInputs, nextOptionName: secondOptionName });
    this.selectAvailableInput(secondInputs);
    return availableVariants;
  }

  hideLastNonExistantInputs(firstAvailableVariants) {
    const { secondOptionName, lastOptionName } = this.getOptionNames();
    const secondValueSelected = this.getInputValueSelected('second');
    const availableVariants = this.getVariantsWithValueSelected(firstAvailableVariants, secondOptionName, secondValueSelected);
    const lastInputs = this.getInputs('last');
    this.hideNonExistantInputBelow({ availableVariants, inputs: lastInputs, nextOptionName: lastOptionName });
    this.selectAvailableInput(lastInputs);
    this.hideInputsContainerWithoutInputs(lastInputs);
  }

  getInputValueSelected(rang) {
    if (rang === 'first') {
      return this.hasSelector ? this.querySelector(`select`).value : this.querySelector(`.radio-container input[type="radio"]:checked`).value;
    } else {
      return this.hasSelector ? this.querySelector(`.radio-container input[type="radio"]:checked`).value : this.querySelector(`.radio-container:nth-child(2) input[type="radio"]:checked`).value;
    }
  }

  getOptionNames() {
    return {
      firstOptionName: 'option1',
      secondOptionName: 'option2',
      lastOptionName: 'option3',
    };
  }

  getVariantsWithValueSelected(variants, optionName, valueSelected) {
    return variants.filter(variant => variant[optionName].toLowerCase() === valueSelected.toLowerCase());
  }

  getInputs(rang) {
    const secondRadioContainer = this.hasSelector ? this.querySelector('.radio-container') : this.querySelector('.radio-container:nth-child(2)');
    const parentContainer = rang === 'second' ? secondRadioContainer : secondRadioContainer.nextElementSibling;
    return Array.from(parentContainer.querySelectorAll(`input[type="radio"]`));
  }

  hideNonExistantInputBelow({ availableVariants, inputs, nextOptionName }) {
    const existantInputs = [];
    inputs.forEach(input => {
      const inputIsNotExistant = !this.inputIsExistant({ input, availableVariants, nextOptionName });
      input.closest('.radio').classList.toggle('hidden', inputIsNotExistant);
      !inputIsNotExistant && existantInputs.push(input);
    });

    const existantInputsCount = existantInputs.length;
    existantInputs.forEach((existantInput, index) => {
      existantInput
        .closest('.radio')
        .querySelector('hr')
        ?.classList.toggle('hidden', index === existantInputsCount - 1);
    });
  }

  inputIsExistant({ input, availableVariants, nextOptionName }) {
    return availableVariants.some(variant => {
      return variant[nextOptionName].toLowerCase() === input.value.toLowerCase();
    });
  }

  selectAvailableInput(inputs) {
    const inputSelected = Array.from(inputs).find(input => input.checked);
    const isInputSelectedAvailable = !inputSelected.closest('.radio').classList.contains('hidden');
    if (!isInputSelectedAvailable) {
      inputs[0].click();
      inputs[0].checked = true;
    }
  }

  hideInputsContainerWithoutInputs(inputs) {
    const onlyInputWithoutValueIsVisible = !Array.from(inputs).some(input => {
      if (input.value.toLowerCase() === 'aucun' || input.value.toLowerCase() === 'sans cadre') return false;
      else {
        return !input.closest('.radio').classList.contains('hidden');
      }
    });
    inputs[0].closest('.radio-container').classList.toggle('hidden', onlyInputWithoutValueIsVisible);
  }

  updateItem() {
    const options = this.getOptions();
    const selectedVariant = this.variantsData.find(variant => {
      return options.every((option, index) => {
        const variantOptionName = 'option' + ++index;
        return option.toLocaleLowerCase() === variant[variantOptionName].toLocaleLowerCase();
      });
    });
    this.itemId = selectedVariant.id;
  }

  getOptions() {
    const radioContainers = Array.from(this.querySelectorAll('.radio-container'));
    return radioContainers.map(radioContainer => {
      return radioContainer.querySelector('input:checked').value;
    });
  }
}
customElements.define('options-selector', OptionsSelector);

class MainOptionsSelector extends OptionsSelector {
  matter = {
    canvas: 'toile',
    plexi: 'plexiglas',
    alu: 'aluminium',
    last: 'toile',
  };

  constructor() {
    super();
    this.optionsSelectorsParent = this.parentElement.parentElement;
    this.canvasTemplate = this.optionsSelectorsParent.querySelector('template#canvas');
    this.aluminiumTemplate = this.optionsSelectorsParent.querySelector('template#aluminium');
    this.matterRadios = this.querySelector('.radio-container').querySelectorAll('input[type="radio"]');
    this.sizeSelector = this.querySelector('select');
  }

  connectedCallback() {
    super.connectedCallback();
    this.implementTemplate(this.canvasTemplate);
    this.matterRadios.forEach(radio => {
      radio.addEventListener('change', () => {
        const validTemplate = this.selectValidTemplate(radio);
        const shouldRemoveSelectorSibling = this.shouldRemoveSelectorSibling();
        if (shouldRemoveSelectorSibling) this.removeOptionsSelectorSibling();
        if (validTemplate) this.implementTemplate(validTemplate);
        this.matter.last = radio.value.toLowerCase();
      });
    });

    //trigger for the first time
    this.hideNonExistantInputs();
  }

  implementTemplate(template) {
    const clone = template.content.cloneNode(true);
    this.parentElement.after(clone);
  }

  selectValidTemplate(radio) {
    const matter = radio.value.toLowerCase();
    switch (matter) {
      case this.matter.canvas:
        return this.canvasTemplate;
      case this.matter.alu:
        return this.aluminiumTemplate;
      default:
        return false;
    }
  }

  shouldRemoveSelectorSibling() {
    return this.matter.last !== this.matter.plexi;
  }

  removeOptionsSelectorSibling() {
    this.parentElement.nextElementSibling.remove();
  }

  getOptions() {
    const radioOptions = super.getOptions();
    const selectOption = this.sizeSelector.value;
    return [selectOption, ...radioOptions];
  }
}
customElements.define('main-options-selector', MainOptionsSelector);

class CanvasOptionsSelector extends OptionsSelector {
  forbiddenSizes = {
    small: [],
    big: [],
    frames: [],
    borderNoFolded: [],
  };

  constructor() {
    super();
    this.forbiddenSizes.small = this.dataset.forbiddenSizesSmall.split(',');
    this.forbiddenSizes.big = this.dataset.forbiddenSizesBig.split(',');
    this.forbiddenSizes.frames = this.dataset.forbiddenSizesFrames.split(',');
    this.forbiddenSizes.borderNoFolded = this.dataset.forbiddenSizesBorderNoFolded.split(',');
    this.mainVariants = this.closest('form').querySelector('main-variants');
    this.canvasAddon = this.closest('canvas-addon');
    this.thickness = this.canvasAddon.thickness;
    this.borderColor = this.canvasAddon.borderColor;
    this.frame = this.canvasAddon.frame;
    this.radios = Array.from(this.querySelectorAll('input[type="radio"]'));
    this.thicknessRadios = this.radios.filter(radio => radio.name === this.thickness.radioName);

    //Bonded listeners
    this.sizeSelectorBoundListener = this.handleSizeChange.bind(this);
    this.thicknessRadioBoundListener = this.handleThicknessChange.bind(this);
  }

  connectedCallback() {
    super.connectedCallback();
    this.mainVariants.sizeSelector.addEventListener('change', this.sizeSelectorBoundListener);
    this.thicknessRadios.forEach(radio => radio.addEventListener('change', this.thicknessRadioBoundListener));
    this.hideForbiddenSizes(this.mainVariants.sizeSelector.value);
    this.hideForbiddenFramesBySize(this.mainVariants.sizeSelector.value);
    this.hideForbiddenBorderNoFoldedBySize(this.mainVariants.sizeSelector.value);
  }

  disconnectedCallback() {
    super.disconnectedCallback();
    this.mainVariants.sizeSelector.removeEventListener('change', this.sizeSelectorBoundListener);
    this.thicknessRadios.forEach(radio => radio.removeEventListener('change', this.thicknessRadioBoundListener));
  }

  handleSizeChange() {
    const size = this.mainVariants.sizeSelector.value;
    this.hideForbiddenSizes(size);
    this.hideForbiddenFramesBySize(size);
    this.hideForbiddenBorderNoFoldedBySize(size);
  }

  handleThicknessChange() {
    this.hideForbiddenFramesBySize(this.mainVariants.sizeSelector.value);
  }

  hideForbiddenSizes(size) {
    const thicknessInputs = this.radios.filter(radio => radio.name === this.thickness.radioName);
    const validThicknessInputs = [];

    thicknessInputs.forEach(input => {
      const forbiddenSizes = this.forbiddenSizes[this.thickness.nameByValue[input.value]];

      if (forbiddenSizes.includes(size)) {
        //hide invalid thickness input
        input.closest('.radio').classList.add('hidden');
      } else {
        //Show sizes previously hidden
        input.closest('.radio').classList.remove('hidden');
        validThicknessInputs.push(input);
      }
    });

    if (validThicknessInputs.length === 1) {
      //hide useless <hr>
      validThicknessInputs[0].closest('.radio').querySelector('hr')?.classList.add('hidden');

      //select valid input
      validThicknessInputs[0].click();
      this.thickness.selected = this.thickness.nameByValue[validThicknessInputs[0].value];
    } else {
      //show usefull <hr>
      thicknessInputs[0].closest('.radio').querySelector('hr').classList.remove('hidden');
    }
  }

  hideForbiddenFramesBySize(size) {
    if (this.thickness.selected === 'big') return;
    const frameInputs = this.radios.filter(radio => radio.name === this.frame.radioName);
    const sizeFormat = [Number(size.split('x')[0]), Number(size.split('x')[1].split(' ')[0])].sort((a, b) => b - a).join('x');
    const framesAreForbidden = this.forbiddenSizes.frames.includes(sizeFormat);

    if (framesAreForbidden) {
      frameInputs[0].click();
      frameInputs[0].closest('.radio-container').classList.add('hidden');
    } else {
      frameInputs[0].closest('.radio-container').classList.remove('hidden');
    }
  }

  hideForbiddenBorderNoFoldedBySize(size) {
    const sizeIsForbidden = this.forbiddenSizes.borderNoFolded.includes(size);
    const borderInputs = this.radios.filter(radio => radio.name === this.borderColor.radioName);
    if (sizeIsForbidden) {
      borderInputs.forEach(input => {
        if (input.value.toLowerCase() !== this.borderColor.folded) {
          input.closest('.radio').classList.add('hidden2');
        } else {
          input.click();
        }
      });
    } else {
      borderInputs.forEach(input => {
        input.closest('.radio').classList.remove('hidden2');
      });
    }
  }
}
customElements.define('canvas-options-selector', CanvasOptionsSelector);

class AluminiumOptionsSelector extends OptionsSelector {
  shine = {
    radioName: 'finition',
    mat: 'mat',
    shine: 'brillant'
  }
  forbiddenSizes = {
    shine: []
  };

  constructor() {
    super();
    this.forbiddenSizes.shine = this.dataset.forbiddenSizesShine.split(',');
    this.mainVariants = this.closest('form').querySelector('main-variants');
    this.radios = Array.from(this.querySelectorAll('input[type="radio"]'));
    this.shineRadios = this.radios.filter(radio => radio.name === this.shine.radioName);

    //Bonded listeners
    this.sizeSelectorBoundListener = this.handleSizeChange.bind(this);
  }

  connectedCallback() {
    this.mainVariants.sizeSelector.addEventListener('change', this.sizeSelectorBoundListener);
    this.hideForbiddenShine(this.mainVariants.sizeSelector.value);
  }

  disconnectedCallback() {
    this.mainVariants.sizeSelector.removeEventListener('change', this.sizeSelectorBoundListener);
  }

  handleSizeChange() {
    const size = this.mainVariants.sizeSelector.value;
    this.hideForbiddenShine(size);
  }

  hideForbiddenShine(size) {
    const sizeIsForbidden = this.forbiddenSizes.shine.includes(size);

    if (sizeIsForbidden) {
      this.shineRadios.forEach(input => {
        if (input.value.toLowerCase() !== this.shine.mat) {
          input.closest('.radio').classList.add('hidden2');
        } else {
          input.click();
        }
      });
    } else {
      this.shineRadios.forEach(input => {
        input.closest('.radio').classList.remove('hidden2');
      });
    }
  }
}
customElements.define('aluminium-options-selector', AluminiumOptionsSelector);